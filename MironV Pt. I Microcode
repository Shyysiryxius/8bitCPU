// ROM Programmer for 8-Bit CPU

#include <stdio.h>
#include <string.h>

#define HLT 0x8000 // Halt clock
#define MI  0x4000 // Memory address register in
#define RI  0x2000 // RAM data in
#define RO  0x1000 // RAM data out
#define TR  0x0800 // T_State Dynamic Reset
#define II  0x0400 // Instruction register in
#define AI  0x0200 // A register in
#define AO  0x0100 // A register out
#define EO  0x0080 // ALU out
#define SU  0x0040 // ALU subtract
#define BI  0x0020 // B register in
#define OI  0x0010 // Output register in
#define CE  0x0008 // Program counter enable
#define CO  0x0004 // Program counter out
#define J   0x0002 // Jump (program counter in)
#define FI  0x0001 // Flags in

#define FLAGS_Z0C0 0
#define FLAGS_Z0C1 1
#define FLAGS_Z1C0 2
#define FLAGS_Z1C1 3

#define JC 0b0111
#define JZ 0b1000

const unsigned short UCODE_TEMPLATE[16][8] = {
  { MI|CO,  RO|II|CE,  TR,        0,          0,            0,             0,   0 },          // 00000 - NOP
  { MI|CO,  RO|II|CE,  MI|CO,     MI|RO|CE,     RO|AI,        TR,          0,   0 },          // 00001 - LDA
  { MI|CO,  RO|II|CE,  MI|CO,     MI|RO|CE,     RO|BI,        EO|AI|FI,    TR,  0 },          // 00010 - ADD
  { MI|CO,  RO|II|CE,  MI|CO,     MI|RO|CE,     RO|BI,        EO|AI|SU|FI, TR,  0 },          // 00011 - SUB
  { MI|CO,  RO|II|CE,  MI|CO,     MI|RO|CE,     AO|RI,        TR,          0,   0 },          // 00100 - STA
  { MI|CO,  RO|II|CE,  MI|CO,     RO|AI|CE,     TR,           0,           0,   0 },          // 00101 - LDI
  { MI|CO,  RO|II|CE,  MI|CO,     RO|J,         TR,           0,           0,   0 },          // 00110 - JMP
  { MI|CO,  RO|II|CE,  CE,        TR,           0,            0,           0,   0 },          // 00111 - JC
  { MI|CO,  RO|II|CE,  CE,        TR,           0,            0,           0,   0 },          // 01000 - JZ
  { MI|CO,  RO|II|CE,  MI|CO,     RO|BI|CE,     EO|AI|FI,     TR,          0,   0 },          // 01001 - ADI
  { MI|CO,  RO|II|CE,  MI|CO,     RO|BI|CE,     EO|AI|SU|FI,  TR,          0,   0 },          // 01010 - SUI
  { MI|CO,  RO|II|CE,  TR,        0,            0,            0,           0,   0 },          // 01011 - NOP
  { MI|CO,  RO|II|CE,  TR,        0,            0,            0,           0,   0 },          // 01100 - NOP   
  { MI|CO,  RO|II|CE,  TR,        0,            0,            0,           0,   0 },          // 01101 - NOP  
  { MI|CO,  RO|II|CE,  AO|OI,     TR,           0,            0,           0,   0 },          // 01110 - OUT
  { MI|CO,  RO|II|CE,  HLT,       0,            0,            0,           0,   0 },          // 01111 - HLT 
  
};

unsigned short ucode[4][16][8];

void initUCode() {
  // ZF = 0, CF = 0
  memcpy(ucode[FLAGS_Z0C0], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));

  // ZF = 0, CF = 1
  memcpy(ucode[FLAGS_Z0C1], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  ucode[FLAGS_Z0C1][JC][2] = MI|CO;
  ucode[FLAGS_Z0C1][JC][3] = RO|J;
  ucode[FLAGS_Z0C1][JC][4] = TR;

  // ZF = 1, CF = 0
  memcpy(ucode[FLAGS_Z1C0], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  ucode[FLAGS_Z1C0][JZ][2] = MI|CO;
  ucode[FLAGS_Z1C0][JZ][3] = RO|J;
  ucode[FLAGS_Z1C0][JZ][4] = TR;

  // ZF = 1, CF = 1
  memcpy(ucode[FLAGS_Z1C1], UCODE_TEMPLATE, sizeof(UCODE_TEMPLATE));
  ucode[FLAGS_Z1C1][JC][2] = MI|CO;
  ucode[FLAGS_Z1C1][JC][3] = RO|J;
  ucode[FLAGS_Z1C1][JC][4] = TR;
  ucode[FLAGS_Z1C1][JZ][2] = MI|CO;
  ucode[FLAGS_Z1C1][JZ][3] = RO|J;
  ucode[FLAGS_Z1C1][JZ][4] = TR;
}

int main (void)
{
  initUCode();

  char ucode_upper[2048];
  char ucode_lower[2048];

  for (int address = 0; address < 2048; address++) {
    int flags = (address & 0b1100000000) >> 8;
    int instruction = (address & 0b00001111000) >> 3;
    int step =  (address & 0b00000000111);

    ucode_lower[address] = ucode[flags][instruction][step];
    ucode_upper[address] = ucode[flags][instruction][step] >> 8;
  }

  FILE *f = fopen("rom_upper.hex", "wb");
  fwrite(ucode_upper, sizeof(char), sizeof(ucode_upper), f);
  fclose(f);

  f = fopen("rom_lower.hex", "wb");
  fwrite(ucode_lower, sizeof(char), sizeof(ucode_lower), f);
  fclose(f);

  return 0;
}
